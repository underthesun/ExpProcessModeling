/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import com.google.gson.Gson;
import components.NodeConfDialog;
import java.awt.BorderLayout;
import java.awt.Point;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import processcheck.NodeProcess;
import processcheck.Process;
//import sim.Check;
//import sim.Simulation;
import util.DataPOJO;
import util.POJOUtils;

/**
 *
 * @author shuai
 */
public class MainPanel extends javax.swing.JPanel {

    private boolean isDataLoaded;
    private boolean isProcessPanel;
    private NodePanel nodePanel;
    private DataPOJO data;

    /**
     * Creates new form MainPanel
     */
    public MainPanel() {
        isDataLoaded = false;
        isProcessPanel = true;
        initComponents();
        add(jMenuBar1, BorderLayout.NORTH);
//        test();
    }

    public void test() {
        openNodeStructure();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        MnProsOpen = new javax.swing.JMenuItem();
        MnProsSave = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnSim = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        processPanel = new main.ProcessPanel();

        jMenu1.setText("文件");
        jMenu1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenu1.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        jMenu1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jMenu1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        MnProsOpen.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        MnProsOpen.setText("打开");
        MnProsOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MnProsOpenActionPerformed(evt);
            }
        });
        jMenu1.add(MnProsOpen);

        MnProsSave.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        MnProsSave.setText("保存");
        MnProsSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MnProsSaveActionPerformed(evt);
            }
        });
        jMenu1.add(MnProsSave);

        jMenuBar1.add(jMenu1);

        setPreferredSize(new java.awt.Dimension(0, 0));
        setLayout(new java.awt.BorderLayout(0, 5));

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));
        jPanel1.add(jLabel1);
        jPanel1.add(jLabel2);

        btnSim.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        btnSim.setText("确定");
        btnSim.setToolTipText("确定");
        btnSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimActionPerformed(evt);
            }
        });
        jPanel1.add(btnSim);
        jPanel1.add(jLabel3);
        jPanel1.add(jLabel4);

        btnCancel.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        btnCancel.setText("取消");
        btnCancel.setToolTipText("取消");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancel);
        jPanel1.add(jLabel5);
        jPanel1.add(jLabel6);

        add(jPanel1, java.awt.BorderLayout.SOUTH);

        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(processPanel);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        if (isProcessPanel) {
            processPanel.reset();
        } else {
            nodePanel.reset();
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimActionPerformed
        // TODO add your handling code here:
        if (isProcessPanel) {
            if (!processPanel.isAllMarked()) {
                JOptionPane.showOptionDialog(this, "请给所有基本过程编号", "提醒", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, new Object[]{"确定"}, "确定");
            } else {
                addNodePanel();
                isProcessPanel = false;
            }
        } else {
            if (!nodePanel.isAllHaveNodes()) {
                JOptionPane.showOptionDialog(this, "每个基本过程至少有一个原子过程", "提醒", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, new Object[]{"确定"}, "确定");
            } else if (!nodePanel.isAllAssociated()) {
                JOptionPane.showOptionDialog(this, "过程缺少必要关联", "提醒", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, new Object[]{"确定"}, "确定");
            } else {
                JOptionPane.showOptionDialog(this, "过程图构建完成", "提醒", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, new Object[]{"确定"}, "确定");
            }
        }
    }//GEN-LAST:event_btnSimActionPerformed

    private void MnProsSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MnProsSaveActionPerformed
        // TODO add your handling code here:
        if (!isProcessPanel) {
            if (!nodePanel.isAllHaveNodes()) {
                JOptionPane.showOptionDialog(this, "每个基本过程至少有一个原子过程", "提醒", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, new Object[]{"确定"}, "确定");
            } else if (!nodePanel.isAllAssociated()) {
                JOptionPane.showOptionDialog(this, "过程缺少必要关联", "提醒", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, new Object[]{"确定"}, "确定");
            } else {
                saveNodeStructure();
            }
        }
    }//GEN-LAST:event_MnProsSaveActionPerformed

    private void MnProsOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MnProsOpenActionPerformed
        // TODO add your handling code here:
//        if (isProcessPanel) {
//        } else {
        openNodeStructure();
//        }
    }//GEN-LAST:event_MnProsOpenActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MnProsOpen;
    private javax.swing.JMenuItem MnProsSave;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSim;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private main.ProcessPanel processPanel;
    // End of variables declaration//GEN-END:variables

    public boolean isIsProcessPanel() {
        return isProcessPanel;
    }

    public void setIsProcessPanel(boolean isProcessPanel) {
        this.isProcessPanel = isProcessPanel;
    }

    /**
     * 根据过程面板得到的processes生成nodeProcess
     */
    public void addNodePanel() {
        nodePanel = new NodePanel();
        ArrayList<Process> aotomProcess = new ArrayList<Process>();
        for (Process p : processPanel.getProcesses()) {
            if (p.isIsAotom()) {
                aotomProcess.add(p);
            }
        }
        int len = aotomProcess.size();
        for (int i = 0; i < len; i++) {
            Process tempi = aotomProcess.get(0);
            for (int j = 0; j < aotomProcess.size(); j++) {
                Process tempj = aotomProcess.get(j);
                if (tempi.getSerial() > tempj.getSerial()) {
                    tempi = tempj;
                }
            }
            NodeProcess np = null;
            if (i == 0) {
                np = new NodeProcess(tempi.getText(), new Point(100, 100), i, nodePanel);
                np.setpName(tempi.getpName());
            } else {
                np = new NodeProcess(tempi.getText(), new Point(200 * i + 100, 100), i, nodePanel);
                np.setpName(tempi.getpName());
            }
            nodePanel.addNodeProcess(np);
            aotomProcess.remove(tempi);
        }

        remove(processPanel);
        add(nodePanel, BorderLayout.CENTER);
        jScrollPane1.setViewportView(nodePanel);
        revalidate();
        repaint();
    }

    public void disableBtns() {
        this.btnSim.setEnabled(false);
        this.btnCancel.setEnabled(false);
    }

    public void enableBtns() {
        this.btnSim.setEnabled(true);
        this.btnCancel.setEnabled(true);
    }

    public void saveNodeStructure() {
        JFileChooser fc = new JFileChooser();
        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File saveFile = fc.getSelectedFile();
            if (!saveFile.exists()) {
                try {
                    saveFile.createNewFile();
                } catch (IOException ex) {
                    Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            POJOUtils.toFile(nodePanel.getNodes(), nodePanel.getNodeProcess(), saveFile);

        }
    }

    public void openNodeStructure() {
        JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File openFile = fc.getSelectedFile();
            if (openFile != null) {
                nodePanel = new NodePanel();
                nodePanel.setNodeDialog(new NodeConfDialog(null, true, nodePanel));
                remove(processPanel);
                jScrollPane1.setViewportView(nodePanel);
                nodePanel.removeAll();
                POJOUtils.fromFile(openFile, nodePanel);

            }
            isProcessPanel = false;
        }
    }

    public void loadData() {
        JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File openFile = fc.getSelectedFile();
            if (openFile != null) {
                BufferedReader br = null;
                try {
                    br = new BufferedReader(new FileReader(openFile));
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                Gson gson = new Gson();
                this.data = gson.fromJson(br, DataPOJO.class);
            }
            isDataLoaded = true;
        }
    }
}
